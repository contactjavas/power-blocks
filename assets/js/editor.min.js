// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../blocks/testimonial/editor.js":[function(require,module,exports) {
var _wp = wp,
    ServerSideRender = _wp.serverSideRender;
var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;
var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    RichText = _wp$editor.RichText;
var PanelBody = wp.components.PanelBody;
var Fragment = wp.element.Fragment;
registerBlockType('powerblocks/testimonial', {
  title: __('Testimonial'),
  icon: 'format-quote',
  category: 'powerblocks',
  keywords: [__('power blocks'), __('power blocks testimonial'), __('blocks'), __('testimonial')],
  attributes: powerblocksTestimonial.attributes,
  example: {
    attributes: {
      content: 'Hello World'
    }
  },

  /**
   * The edit function describes the structure of your block in the context of the editor.
   * This represents what the editor will render when the block is used.
   *
   * The "edit" property must be a valid function.
   *
   * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/
   *
   * @param {Object} props Props.
   * @returns {Mixed} JSX Editor Component.
   */
  edit: function edit(props) {
    console.log(props);
    return /*#__PURE__*/React.createElement("div", {
      className: props.className
    }, /*#__PURE__*/React.createElement("h3", null, "Testimonial"), /*#__PURE__*/React.createElement(ServerSideRender, {
      block: "powerblocks/testimonial",
      attributes: props.attributes
    }));
  },

  /**
   * The save function defines the way in which the different attributes should be combined
   * into the final markup, which is then serialized by Gutenberg into post_content.
   *
   * The "save" property must be specified and must be a valid function.
   *
   * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/
   *
   * @param {Object} props Props.
   * @returns {Mixed} JSX Frontend HTML.
   */
  save: function save(props) {
    return null;
  }
});
},{}],"../blocks/subscribe-form/editor.js":[function(require,module,exports) {
var _wp = wp,
    ServerSideRender = _wp.serverSideRender;
var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;
var _wp$blockEditor = wp.blockEditor,
    InspectorControls = _wp$blockEditor.InspectorControls,
    BlockControls = _wp$blockEditor.BlockControls,
    RichText = _wp$blockEditor.RichText,
    AlignmentToolbar = _wp$blockEditor.AlignmentToolbar,
    PanelColorSettings = _wp$blockEditor.PanelColorSettings,
    ColorPalette = _wp$blockEditor.ColorPalette;
var _wp$components = wp.components,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl,
    Panel = _wp$components.Panel,
    PanelBody = _wp$components.PanelBody,
    PanelRow = _wp$components.PanelRow,
    RangeControl = _wp$components.RangeControl,
    SelectControl = _wp$components.SelectControl,
    ColorPicker = _wp$components.ColorPicker;
var Fragment = wp.element.Fragment;
registerBlockType('powerblocks/subscribe-form', {
  title: __('Subscribe Form'),
  icon: 'email',
  category: 'powerblocks',
  keywords: [__('power blocks'), __('power blocks subscribe form'), __('blocks'), __('subscribe form')],
  attributes: powerblocksSubscribeForm.attributes,
  supports: {
    align: ['wide', 'full']
  },
  example: {
    attributes: {
      content: 'Hello World'
    }
  },

  /**
   * The edit function describes the structure of your block in the context of the editor.
   * This represents what the editor will render when the block is used.
   *
   * The "edit" property must be a valid function.
   *
   * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/
   *
   * @param {Object} props Props.
   * @returns {Mixed} JSX Editor Component.
   */
  edit: function edit(props) {
    var attributes = props.attributes,
        setAttributes = props.setAttributes,
        className = props.className;
    var align = attributes.align,
        title = attributes.title,
        description = attributes.description,
        contentAlignment = attributes.contentAlignment,
        sectionSize = attributes.sectionSize,
        sectionBgColor = attributes.sectionBgColor,
        containerSize = attributes.containerSize,
        boxWidth = attributes.boxWidth,
        boxBgColor = attributes.boxBgColor,
        formAction = attributes.formAction,
        formName = attributes.formName,
        inputName = attributes.inputName,
        inputWidth = attributes.inputWidth,
        emailPlaceholder = attributes.emailPlaceholder,
        submitButtonText = attributes.submitButtonText;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(InspectorControls, null, /*#__PURE__*/React.createElement(PanelBody, {
      title: __('Layout Options', 'power-blocks')
    }, /*#__PURE__*/React.createElement(SelectControl, {
      label: __("Section Size"),
      value: sectionSize,
      onChange: function onChange(value) {
        return setAttributes({
          sectionSize: value
        });
      },
      separatorType: "fullWidth",
      options: [{
        value: "is-full",
        label: __("Full Height")
      }, {
        value: "is-small",
        label: __("Small Gap")
      }, {
        value: "is-normal",
        label: __("Normal")
      }, {
        value: "is-medium",
        label: __("Medium Gap")
      }, {
        value: "is-large",
        label: __("Large Gap")
      }]
    }), /*#__PURE__*/React.createElement(SelectControl, {
      label: __("Container Size"),
      value: containerSize,
      onChange: function onChange(value) {
        return setAttributes({
          containerSize: value
        });
      },
      separatorType: "fullWidth",
      options: [{
        value: "is-small",
        label: __("Small Width")
      }, {
        value: "is-normal",
        label: __("Normal")
      }, {
        value: "is-fluid",
        label: __("Fluid")
      }, {
        value: "is-full",
        label: __("Full Width")
      }]
    }), /*#__PURE__*/React.createElement(RangeControl, {
      label: __("Form Width (%)"),
      value: boxWidth,
      onChange: function onChange(value) {
        return setAttributes({
          boxWidth: value
        });
      },
      min: 0,
      max: 100,
      separatorType: "fullWidth",
      allowReset: true
    }), /*#__PURE__*/React.createElement(RangeControl, {
      label: __("Input Width (%)"),
      value: inputWidth,
      onChange: function onChange(value) {
        return setAttributes({
          inputWidth: value
        });
      },
      min: 0,
      max: 100,
      separatorType: "fullWidth",
      allowReset: true
    })), /*#__PURE__*/React.createElement(PanelColorSettings, {
      title: __("Color Settings"),
      initialOpen: false,
      colorSettings: [{
        value: sectionBgColor,
        onChange: function onChange(value) {
          return setAttributes({
            sectionBgColor: value
          });
        },
        label: __("Section Background Color")
      }, {
        value: boxBgColor,
        onChange: function onChange(value) {
          return setAttributes({
            boxBgColor: value
          });
        },
        label: __("Box Background Color")
      }]
    })), /*#__PURE__*/React.createElement(BlockControls, null, /*#__PURE__*/React.createElement(AlignmentToolbar, {
      value: contentAlignment,
      onChange: function onChange(value) {
        return setAttributes({
          contentAlignment: value
        });
      }
    })), /*#__PURE__*/React.createElement("div", {
      className: "pwb-block pwb-subscribe-form " + className
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-section " + sectionSize,
      style: {
        backgroundColor: sectionBgColor
      }
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-container " + containerSize
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-box pwb-has-text-" + contentAlignment,
      style: {
        backgroundColor: boxBgColor,
        maxWidth: boxWidth + "%"
      }
    }, /*#__PURE__*/React.createElement(RichText, {
      tagName: "h2",
      className: "pwb-title",
      value: title,
      style: {
        textAlign: contentAlignment
      },
      onChange: function onChange(value) {
        return setAttributes({
          title: value
        });
      }
    }), /*#__PURE__*/React.createElement(RichText, {
      tagName: "div",
      className: "pwb-description",
      value: description,
      style: {
        textAlign: contentAlignment
      },
      onChange: function onChange(value) {
        return setAttributes({
          description: value
        });
      }
    }), /*#__PURE__*/React.createElement("form", {
      action: formAction,
      name: formName,
      class: "pwb-form",
      onSubmit: function onSubmit(e) {
        return e.preventDefault();
      }
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-field"
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-control is-inline"
    }, /*#__PURE__*/React.createElement("input", {
      type: "search",
      name: inputName,
      class: "pwb-input",
      style: {
        width: inputWidth + "%"
      },
      placeholder: emailPlaceholder
    }), /*#__PURE__*/React.createElement(RichText, {
      tagName: "button",
      className: "pwb-button",
      value: submitButtonText,
      withoutInteractiveFormatting: true,
      onChange: function onChange(value) {
        return setAttributes({
          submitButtonText: value
        });
      }
    })))))))));
  },

  /**
   * The save function defines the way in which the different attributes should be combined
   * into the final markup, which is then serialized by Gutenberg into post_content.
   *
   * The "save" property must be specified and must be a valid function.
   *
   * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/
   *
   * @param {Object} props Props.
   * @returns {Mixed} JSX Frontend HTML.
   */
  save: function save(props) {
    var attributes = props.attributes,
        className = props.className;
    var align = attributes.align,
        title = attributes.title,
        description = attributes.description,
        contentAlignment = attributes.contentAlignment,
        sectionSize = attributes.sectionSize,
        sectionBgColor = attributes.sectionBgColor,
        containerSize = attributes.containerSize,
        boxWidth = attributes.boxWidth,
        boxBgColor = attributes.boxBgColor,
        formAction = attributes.formAction,
        formName = attributes.formName,
        inputName = attributes.inputName,
        inputWidth = attributes.inputWidth,
        emailPlaceholder = attributes.emailPlaceholder,
        submitButtonText = attributes.submitButtonText;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("div", {
      className: "pwb-block pwb-subscribe-form " + className
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-section " + sectionSize,
      style: {
        backgroundColor: sectionBgColor
      }
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-container " + containerSize
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-box pwb-has-text-" + contentAlignment,
      style: {
        backgroundColor: boxBgColor,
        maxWidth: boxWidth + "%"
      }
    }, /*#__PURE__*/React.createElement(RichText.Content, {
      tagName: "h2",
      className: "pwb-title",
      value: title
    }), /*#__PURE__*/React.createElement(RichText.Content, {
      tagName: "div",
      className: "pwb-description",
      value: description
    }), /*#__PURE__*/React.createElement("form", {
      action: formAction,
      name: formName,
      class: "pwb-form"
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-field"
    }, /*#__PURE__*/React.createElement("div", {
      class: "pwb-control is-inline"
    }, /*#__PURE__*/React.createElement("input", {
      type: "search",
      name: inputName,
      class: "pwb-input",
      style: {
        width: inputWidth + "%"
      },
      placeholder: emailPlaceholder
    }), /*#__PURE__*/React.createElement(RichText.Content, {
      tagName: "button",
      className: "pwb-button",
      value: submitButtonText
    })))))))));
  }
});
},{}],"editor.js":[function(require,module,exports) {
"use strict";

require("../blocks/testimonial/editor.js");

require("../blocks/subscribe-form/editor.js");
},{"../blocks/testimonial/editor.js":"../blocks/testimonial/editor.js","../blocks/subscribe-form/editor.js":"../blocks/subscribe-form/editor.js"}],"../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "50841" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","editor.js"], null)